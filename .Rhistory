#
options(max.print = .Machine$integer.max)
1+1
2^9
1+2^9
## Assign x to 1, y to 2 and z to 3
x = 1
y <- 2
z = 3
## Print Hello World
print("Hello World")
## Add 17 to 5
17+5
## Add 5 to x
5+x
## Add 15 to 5 and store it in a variable called y
y = 15+5
## Find the square root of 16 and store it in a variable called y
y <- sqrt(16)      #Square root function
## Find the square root of 16
sqrt(16)
## Set the variable x to 6 (Numeric Type)
x = 6
as.numeric(x)
typeof(x)
## Set the variable y to "Hello" (Character Type)
y = "Hello"
typeof(y)
class(y)
# Store the value in a variable Z
Z = 7
# Call capital Z
Z
## 2.5: Check the data type of the variable a
class(Z)
typeof(Z)
## 2.6: Set a variable num to 8.5
num = 8.5
print(num)   ## Call the variable num
class(num)    ## This is used to check the data type of a variable
typeof(num)
## 2.7: Change numeric data type to integer
int = as.integer(num)
class(int)  ## Check the data type of the variable int
typeof(int)
print(int)
## 2.8: Create a character variable from a numeric variable
char <- "8735"
class(char)
typeof(char)
versuch = as.numeric(char)
print(versuch)
class(versuch)
typeof(versuch)
logi = TRUE
class(logi)
typeof(logi)
print(logi)
print(logi = FALSE)
print(FALSE = TRUE)
print(FALSE == TRUE)
print(logi == TRUE)
print(logi == FALSE)
## 2.10: Store movie ratings in a variable called fac
fac = factor(c("1Star", "2Stars", "5Stars"))
class(fac)   ## Check the data type
## 3.1: Create a vector of the marks of 4 students
## use c() to store several values in one variable
marks = c(15, 67, 52, 93)
## 3.2: Check the data type of the vector
class(marks)
typeof(marks)
## 3.3: Check the length of the variable
length(marks)
## 3.4: Indexing and Slicing
marks[4]               ## Returns the 4th mark
marks[2:4]               ## Returns the 2nd, 3rd and 4th marks
## (Ex.) What do you think the result will be?
marks[-1]
## (Ex.) What do you think the result will be?
marks[-3]
char_vec = c("a","b","c","d")
## 3.6 (Ex.): Check the data type and length of the vector
class(char_vec)
typeof(char_vec)
## 3.7 (Ex.): Retrieve the 1st, 2nd and 3rd characters in the char_vec vector
char_vec[1:3]
## 3.8: Create the variable char_num_vec to take numeric and character types
char_num_vec = c(10,20,30,"d")
## 3.9 (Ex.) : What do you think will be the data type of the vector?
class(char_num_vec)
typeof(char_num_vec)
## 3.10: Create a vector of odd numbers
seq(1,17, by=2)
## 3.10: Create a vector of odd numbers
seq(1,17, by=3)
hist(lynx)
View(lynx)
# Histograms with options
hist(lynx,
breaks = 14,
freq = FALSE)
# Histograms with options
hist(lynx,
breaks = 14,
freq = TRUE)
hist(lynx)
# Histograms with options
hist(lynx,
breaks = 12,
freq = TRUE)
# Histograms with options
hist(lynx,
breaks = 12,
freq   = TRUE,
col    = "thistle1",
main   = paste("Histogram of Annual Canadian Lynx",
"Trappings, 1821-1934"),
xlab   = "Number of Lynx Trapped")
# Histograms with options
hist(lynx,
breaks = 12,
freq   = FALSE,
col    = "thistle1",
main   = paste("Histogram of Annual Canadian Lynx",
"Trappings, 1821-1934"),
xlab   = "Number of Lynx Trapped")
# Histograms with options
hist(lynx,
breaks = 20,
freq   = FALSE,
col    = "thistle1",
main   = paste("Histogram of Annual Canadian Lynx",
"Trappings, 1821-1934"),
xlab   = "Number of Lynx Trapped")
# Histograms with options
hist(lynx,
breaks = 5,
freq   = FALSE,
col    = "thistle1",
main   = paste("Histogram of Annual Canadian Lynx",
"Trappings, 1821-1934"),
xlab   = "Number of Lynx Trapped")
# Histograms with options
hist(lynx,
breaks = 10,
freq   = FALSE,
col    = "thistle1",
main   = paste("Histogram of Annual Canadian Lynx",
"Trappings, 1821-1934"),
xlab   = "Number of Lynx Trapped")
# Add a normal distribution
curve(dnorm(x, mean = mean(lynx), sd = sd(lynx)),
col = "thistle4",
lwd = 2,
add = TRUE)
# Add two kernel density estimators
lines(density(lynx), col="blue", lwd=2)
lines(density(lynx, adjust=3), col = "purple", lwd=2)
# Add a rug plot
rug(lynx, lwd=2, col="gray")
# Add a rug plot
rug(lynx, lwd=3, col="gray")
# Add a rug plot
rug(lynx, lwd=1, col="gray")
# Add a rug plot
rug(lynx, lwd=1, col="gray")
# Add a rug plot
rug(lynx, lwd=2, col="gray")
# Add a rug plot
rug(lynx, lwd=2, col="gray")
summary(iris)
summary(iris$Species)
summary(iris$Sepal.Length)
install.packages("pacman")
pacman::p_load(pacman, dplyr, GGally, ggplot2)
pacman::p_load(pacman, dplyr, GGally, ggplot2, ggthemes,
ggvis, httr, lubridate, plotly, rio,
rmarkdown, shiny, stringr, tidyr)
pacman::p_load(pacman, dplyr, GGally, ggplot2, ggthemes,
ggvis, httr, lubridate, plotly, rio,
rmarkdown, shiny, stringr, tidyr)
head(iris)
p_load(psych)
p_load(psych)
p_load(psych, web=F)
p_load(psych, web=F)
describe(iris$Sepal.Length)
describe(iris)
describe(iris)
install.packages(c("nycflights13", "gapminder", "Lahman"))
#
arrange(flights, year, month, day)
#
setwd("D:/pjt_R/Data visualization")
rm(list=ls())
library(nycflights13)
library(tidyverse)
dim(flights)
#
arrange(flights, year, month, day)
#
arrange(flights, year, month, day, dep_time)
#
arrange(flights, year, month, day, flight)
#
arrange(flights, year, month, day, carrier)
#
arrange(flights, year, month, day, dep_delay)
#
arrange(flights, year, month, day, arr_delay)
#
arrange(flights, year, month, day, desc(arr_delay))
#
arrange(flights, year, month, day, desc(dep_delay))
# Select columns by name
select(flights, year, month, day)
# Select all columns except those from year to day (inclusive)
select(flights, -(year:day))
library(tidyverse)
#####RUN THIS CODE WITHOUT MODIFICATION
###This will import the survey data we have been working with in this course and drop data with missing rows from the data
dat <- drop_na(read_csv(url("https://www.dropbox.com/s/uhfstf6g36ghxwp/cces_sample_coursera.csv?raw=1")))
View(dat)
#### Write your code below:
p1 <- select(dat, c("educ", "edloan", "employ", "CC18_308a"))
View(p1)
p1
#### Write your code below:
a = recode(p1$CC18_308a, `1`=1, `2`=1, `3`=0, `4`=0)
#### Write your code below:
p2 <- p1 %>% mutate(recode(p1$CC18_308a, `1`=1, `2`=1, `3`=0, `4`=0))
View(p2)
#### Write your code below:
p2 <- p1 %>% mutate("trump_approve_disapprove" = recode(p1$CC18_308a, `1`=1, `2`=1, `3`=0, `4`=0))
View(p2)
#### Write your code below:
p2 <- p1 %>% mutate("trump_approve_disapprove" = p1$CC18_308a %>% recode(`1`=1, `2`=1, `3`=0, `4`=0))
View(p2)
#### Write your code below:
p2 <- p1 %>% mutate("trump_approve_disapprove_test" = p1$CC18_308a %>% recode(`1`=1, `2`=1, `3`=0, `4`=0))
View(p2)
#### Write your code below:
p2 <- p1 %>% mutate("trump_approve_disapprove" = p1$CC18_308a %>% recode(`1`=1, `2`=1, `3`=0, `4`=0))
# Firstly recode(), then mutate().
p2
step1 = p1 %>% filter(employ==1)
View(step1)
step1 = dat %>% filter(employ==1 & marstat==1)
View(step1)
step2 = summarise(step1$pew_religimp)
View(step1)
step2 = summarise(step1, "Mean Importance of Religion" = mean(pew_religimp))
step2
step2 = summarise(step1, "Mean Importance of Religion" = mean(pew_religimp),
"Median Importance of Religion" = median(pew_religimp))
step2
step1 = dat %>% filter(employ==1 & marstat==1)
step2 = step1 %>% summarise("Mean Importance of Religion" = mean(pew_religimp),
"Median Importance of Religion" = median(pew_religimp))
step2
step1 = dat %>% filter(employ==1 & marstat==1)%>% summarise("Mean Importance of Religion" = mean(pew_religimp),
"Median Importance of Religion" = median(pew_religimp))
step1
library(tidyverse)
#####RUN THIS CODE WITHOUT MODIFICATION
###This will import the survey data we have been working with in this course and drop data with missing rows from the data
dat <- drop_na(read_csv(url("https://www.dropbox.com/s/uhfstf6g36ghxwp/cces_sample_coursera.csv?raw=1")))
p1 <- select(dat, c("educ", "edloan", "employ", "CC18_308a"))
p1
p2 <- p1 %>% mutate("trump_approve_disapprove" = p1$CC18_308a %>% recode(`1`=1, `2`=1, `3`=0, `4`=0))
# Firstly recode(), then mutate().
p2
step1 = dat %>% filter(employ==1 & marstat==1)
step2 = step1 %>% summarise("Mean Importance of Religion" = mean(pew_religimp),
"Median Importance of Religion" = median(pew_religimp))
step2
library(tidyverse)
#####RUN THIS CODE WITHOUT MODIFICATION
###This will import the survey data we have been working with in this course and drop data with missing rows from the data
dat <- drop_na(read_csv(url("https://www.dropbox.com/s/uhfstf6g36ghxwp/cces_sample_coursera.csv?raw=1")))
p1 <- select(dat, c("educ", "edloan", "employ", "CC18_308a"))
p1
p2 <- p1 %>% mutate("trump_approve_disapprove" = p1$CC18_308a %>% recode(`1`=1, `2`=1, `3`=0, `4`=0))
# Firstly recode(), then mutate().
p2
p3 = dat %>% filter(employ==1 & marstat==1) %>% summarise("Mean Importance of Religion" = mean(pew_religimp),
"Median Importance of Religion" = median(pew_religimp))
p3
